----Lecture 1 of oops Notes


JavaScript is a prototype based language
oops is just a programming paradim means structure to write code
objects are just collection of properties and methods
used to reove the messy codes
object literal are the part of the oops in javaScript
this keyword is used to call current context
if we console log the this in global context then we get window object
to get new instance new keyWord is used


JavaScript and Prototypes:

JavaScript is a prototype-based language, meaning it uses prototypes instead of classes for inheritance. Objects can inherit properties and methods from other objects.
OOP Paradigm:

OOP (Object-Oriented Programming) is a paradigm that structures code by defining objects that combine data (properties) and behaviors (methods). It helps in organizing code and managing complexity.
Objects:

In JavaScript, objects are collections of properties and methods. They serve as the fundamental building blocks in this language, allowing you to group related data and functions.
Removing Messy Code:

OOP helps to make code cleaner and more manageable by encapsulating data and functionality within objects, reducing redundancy and improving readability.
Object Literals:

Object literals are a way to create objects using a simple syntax. For example:
javascript
Copy code
let person = {
  name: 'John',
  age: 30,
  greet: function() {
    console.log('Hello!');
  }
};
this Keyword:

The this keyword refers to the current context within an object. In a method, this points to the object that owns the method. In the global context (outside of any function or object), this refers to the global object (i.e., window in browsers).
Creating New Instances:

To create a new instance of an object or a class, you use the new keyword. This keyword is used to instantiate objects from a constructor function or a class.
Example of using the new keyword:

javascript
Copy code
function Person(name, age) {
  this.name = name;
  this.age = age;
}

let john = new Person('John', 30);

const user = {
    username: "hitesh",
    loginCount: 8,
    signedIn: true,

    getUserDetails: function(){
        //console.log("Got user details from database");
        // console.log(`Username: ${this.username}`);
        console.log(this);
    }

}



//console.log(user.username)
//console.log(user.getUserDetails());
// console.log(this);


function User(username, loginCount, isLoggedIn){
    this.username = username;
    this.loginCount = loginCount;
    this.isLoggedIn = isLoggedIn

    this.greeting = function(){
        console.log(`Welcome ${this.username}`);

    }

    return this
}


const userOne = new User("hitesh", 12, true)
const userTwo = new User("ChaiAurCode", 11, false)
console.log(userOne.constructor);
//console.log(userTwo);

---- letcure 2 notes of oops


As we know that javaScript is a protoType language it means it search upper and upper until it reach the null value 
This concept of prototype provides the concept of this and new Keyword or many other things like inheritance etc.
In java All the things are Object means the parent of all is Object after object null is present

FunctionName.protoType.methodName = function() // thus we gave property if we ru this code then it not run give error this only run after the using new keyword


Prototype Chain in JavaScript
In JavaScript, every object has a prototype, and the prototype itself is an object. This creates a prototype chain, which allows properties and methods to be inherited from parent objects.

Prototype Chain: When you try to access a property or method on an object, JavaScript looks up the prototype chain until it either finds the property/method or reaches the end of the chain (which is null).
Constructor Functions and new Keyword
Constructor Functions: In JavaScript, constructor functions are used to create new objects. When you use the new keyword with a constructor function, a new object is created, and its prototype is set to the constructor's prototype property.

javascript
Copy code
function Person(name) {
  this.name = name;
}

Person.prototype.greet = function() {
  console.log("Hello, " + this.name);
};

const john = new Person('John');
john.greet(); // Outputs: Hello, John
Here, Person.prototype.greet is a method available to all instances created with new Person().

Without new Keyword: If you call a constructor function without new, it won't create a new instance, and the this keyword inside the constructor function will not refer to a new object. This is why it's common to use new with constructor functions.

FunctionName.prototype.methodName
Adding Methods: You can add methods to the prototype of a constructor function, and these methods will be available to all instances created by that constructor function.

javascript
Copy code
function Car(model) {
  this.model = model;
}

Car.prototype.start = function() {
  console.log("Starting " + this.model);
};

const myCar = new Car('Toyota');
myCar.start(); // Outputs: Starting Toyota
In this example, start is added to Car.prototype, making it available to all Car instances.

Summary
Prototype Chain: JavaScript uses prototypes to implement inheritance, where each object can inherit properties and methods from its prototype.
Constructor Functions: The new keyword is used to create new objects and set up their prototype chain.
Prototype Methods: Methods added to a constructor function's prototype are shared among all instances of that constructor.


Lecture 3 OOps

This Keyword refer in window or Browser to window object but in node environment refer to {} empty object
.call method is used to call another function inside the any other functionused to hold the refrence

example::

function setUserName(UserName){
      this.userName = userName;
}
function createUser(userName,email){
     setUserName.call(this,userName)
     this.email = email
}
const chai = new createUser(chai,skews@gmail.com);
console.log(chai);

JavaScript this Keyword
The this keyword in JavaScript refers to the context in which a function is executed. Its value is determined by how a function is called:

In the Global Context:

Browser: this refers to the global window object.
Node.js: this refers to an empty object ({}), as Node.js does not have a window object.
In a Function Context:

Non-Strict Mode: If you call a function without any context, this refers to the global object (window in browsers, {} in Node.js).
Strict Mode: this is undefined if the function is called without context.
In an Object Method: this refers to the object that owns the method.

In a Constructor Function: When a function is invoked with the new keyword, this refers to the new instance being created.

JavaScript call Method
The call method allows you to invoke a function with a specified this value and arguments provided individually. The syntax is:

javascript
Copy code
functionName.call(thisValue, arg1, arg2, ...);
thisValue: The value to be passed as this when calling the function.
arg1, arg2, ...: Arguments to be passed to the function.
Example Explained
Let's dissect the example you provided:

Function Definitions
setUserName Function:

javascript
Copy code
functionsetUserName(userName) {
    this.userName = userName;
}
This function assigns the userName parameter to the userName property of the this context.
createUser Function:

javascript
Copy code
functioncreateUser(userName, email) {
    setUserName.call(this, userName); // Use call to set `userName` on the current contextthis.email = email;
}
setUserName.call(this, userName) calls setUserName with this as the context. This means the userName will be set on the createUser instance.
Instantiating createUser
javascript
Copy code
const chai = newcreateUser('chai', 'skews@gmail.com');
new createUser('chai', 'skews@gmail.com') creates a new instance of createUser.
The new keyword:
Creates a new object.
Sets this in createUser to that new object.
Calls the createUser function with this new object as the context.
Adds userName and email properties to the new object.
Result
When you log chai:

javascript
Copy code
console.log(chai);
The output is:
javascript
Copy code
createUser { userName: 'chai', email: 'skews@gmail.com' }
This shows that the chai object has both userName and email properties set as expected.
Summary
this: Refers to the context of execution. Its value changes depending on where and how a function is invoked.
call Method: Invokes a function with a specified this context and arguments.
Constructor Functions: Create new instances, setting this to the newly created object.


Lecture 4 oops

classes
// ES6

class User {
    constructor(username, email, password){
        this.username = username;
        this.email = email;
        this.password = password
    }

    encryptPassword(){
        return `${this.password}abc`
    }
    changeUsername(){
        return `${this.username.toUpperCase()}`
    }

}

const chai = new User("chai", "chai@gmail.com", "123")

console.log(chai.encryptPassword());
console.log(chai.changeUsername());

// behind the scene

function User(username, email, password){
    this.username = username;
    this.email = email;
    this.password = password
}

User.prototype.encryptPassword = function(){
    return `${this.password}abc`
}
User.prototype.changeUsername = function(){
    return `${this.username.toUpperCase()}`
}


const tea = new User("tea", "tea@gmail.com", "123")

console.log(tea.encryptPassword());
console.log(tea.changeUsername());

inheritance

class User {
    constructor(username){
        this.username = username
    }

    logMe(){
        console.log(`USERNAME is ${this.username}`);
    }
}

class Teacher extends User{
    constructor(username, email, password){
        super(username)
        this.email = email
        this.password = password
    }

    addCourse(){
        console.log(`A new course was added by ${this.username}`);
    }
}

const chai = new Teacher("chai", "chai@teacher.com", "123")

chai.logMe()
const masalaChai = new User("masalaChai")

masalaChai.logMe()

console.log(chai instanceof User);
     
