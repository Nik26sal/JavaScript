const variableName = Object.assign(target,...source)
const variableName = {...obj1,...obj2}
Object.keys(variableName);//output is a type of array of all keys
Object.values(variableName);//output is a type of array of all values
Object.entries(variableName);
variableName.hasOwnProperty();



// Example source objects
const obj1 = { a: 1, b: 2 };
const obj2 = { c: 3, d: 4 };

// Merging objects using Object.assign
const target = {};
const variableName = Object.assign(target, obj1, obj2);

// Alternatively, using the spread operator to merge objects
const variableNameSpread = { ...obj1, ...obj2 };

// Displaying the object
console.log(variableName); // Output: { a: 1, b: 2, c: 3, d: 4 }

// Getting all keys as an array
console.log(Object.keys(variableName)); // Output: ['a', 'b', 'c', 'd']

// Getting all values as an array
console.log(Object.values(variableName)); // Output: [1, 2, 3, 4]

// Getting entries as an array of key-value pairs
console.log(Object.entries(variableName)); // Output: [['a', 1], ['b', 2], ['c', 3], ['d', 4]]

// Checking if the object has a specific property
console.log(variableName.hasOwnProperty('a')); // Output: true
console.log(variableName.hasOwnProperty('e')); // Output: false


Explanation:
Merging Objects:

Object.assign(target, ...sources) merges the properties of source objects into target.
{ ...obj1, ...obj2 } is a shorthand using the spread operator to create a new object with properties from obj1 and obj2.
Inspecting the Object:

Object.keys(variableName) returns an array of the object's own enumerable property names.
Object.values(variableName) returns an array of the object's own enumerable property values.
Object.entries(variableName) returns an array of [key, value] pairs for the object's own enumerable properties.
Checking Property Existence:

variableName.hasOwnProperty('key') checks if the object has the specified property as its own property.
